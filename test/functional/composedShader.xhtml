<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
	<meta http-equiv='Content-Type' content='text/html;charset=utf-8'/>
<!-- BEGIN:X3DOM -->
<meta http-equiv="X-UA-Compatible" content="chrome=1,IE=edge" />
<link rel="stylesheet" type="text/css" href="../../src/x3dom.css" />
<script type="text/javascript" src="../../src/lang/Array.js"></script>
<script type="text/javascript" src="../../src/Internals.js"></script>
<script type="text/javascript" src="../../src/debug.js"></script>
<script type="text/javascript" src="../../src/ImageLoadManager.js"></script>
<script type="text/javascript" src="../../src/util/Properties.js"></script>
<script type="text/javascript" src="../../src/util/DoublyLinkedList.js"></script>
<script type="text/javascript" src="../../src/util/EarClipping.js"></script>
<script type="text/javascript" src="../../src/X3DCanvas.js"></script>
<script type="text/javascript" src="../../src/Runtime.js"></script>
<script type="text/javascript" src="../../src/Main.js"></script>
<script type="text/javascript" src="../../src/gfx_webgl.js"></script>
<script type="text/javascript" src="../../src/gfx_flash.js"></script>
<script type="text/javascript" src="../../src/X3DDocument.js"></script>
<script type="text/javascript" src="../../src/MatrixMixer.js"></script>
<script type="text/javascript" src="../../src/Viewarea.js"></script>
<script type="text/javascript" src="../../src/Mesh.js"></script>
<script type="text/javascript" src="../../src/fields.js"></script>
<script type="text/javascript" src="../../src/nodes/NodeNameSpace.js"></script>
<script type="text/javascript" src="../../src/nodes/Core.js"></script>
<script type="text/javascript" src="../../src/nodes/Grouping.js"></script>
<script type="text/javascript" src="../../src/nodes/Bindable.js"></script>
<script type="text/javascript" src="../../src/nodes/Rendering.js"></script>
<script type="text/javascript" src="../../src/nodes/Shape.js"></script>
<script type="text/javascript" src="../../src/nodes/Lighting.js"></script>
<script type="text/javascript" src="../../src/nodes/Followers.js"></script>
<script type="text/javascript" src="../../src/nodes/Interpolation.js"></script>
<script type="text/javascript" src="../../src/nodes/Time.js"></script>
<script type="text/javascript" src="../../src/nodes/Networking.js"></script>
<script type="text/javascript" src="../../src/nodes/EnvironmentalEffects.js"></script>
<script type="text/javascript" src="../../src/nodes/Navigation.js"></script>
<script type="text/javascript" src="../../src/nodes/Text.js"></script>
<script type="text/javascript" src="../../src/nodes/Sound.js"></script>
<script type="text/javascript" src="../../src/nodes/Texturing.js"></script>
<script type="text/javascript" src="../../src/nodes/Shaders.js"></script>
<script type="text/javascript" src="../../src/nodes/Geometry3D.js"></script>
<script type="text/javascript" src="../../src/nodes/Geospatial.js"></script>
<script type="text/javascript" src="../../src/nodes/Geometry2D.js"></script>
<script type="text/javascript" src="../../src/nodes/VolumeRendering.js"></script>
<script type="text/javascript" src="../../src/Docs.js"></script>
<!-- END:X3DOM -->
    <script type="text/javascript" src="media/js/tests.js"></script>
</head>
<body>
	<h1>Composed Shader</h1>
    <p>You should see a grey dounut.</p>
	<div class="group">
    <X3D xmlns='http://www.web3d.org/specifications/x3d-namespace' id='someUniqueId' showStat='true' showLog='true' x='0px' y='0px' width='500px' height='500px'>
      <Scene DEF='scene'>
        <Background skyColor='0.1 0.3 0.6'/>
        <Viewpoint position='0 0 5'/>
        <Transform translation="-1 0 0">
            <Shape>
              <Appearance>
                <ComposedShader DEF='ComposedShader'>
                  <field name='DiffuseColor' type='SFVec3f' value='0.3 0.3 0.3'/>
                  <field name='PhongColor' type='SFVec3f' value='0.5 0.5 0.5'/>
                  <field name='Edge' type='SFFloat' value='0.5'/>
                  <field name='Phong' type='SFFloat' value='0.8'/>

                  <ShaderPart type='VERTEX'>
                  <![CDATA[
                        attribute vec3 position;
                        attribute vec3 normal;
                        uniform mat4 modelViewMatrix;
                        uniform mat4 modelViewProjectionMatrix;
                        varying vec3 fragNormal;

                        void main()
                        {
                            fragNormal = (modelViewMatrix * vec4(normal, 0.0)).xyz;
                            gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);
                        }
                  ]]>
                  </ShaderPart>

                  <ShaderPart type='FRAGMENT'>
                  <![CDATA[
                        #ifdef GL_ES
                          precision highp float;
                        #endif

                        uniform vec3 DiffuseColor;
                        uniform vec3 PhongColor;
                        uniform float Edge;
                        uniform float Phong;
                        varying vec3 fragNormal;

                        void main()
                        {
                            vec3 color = DiffuseColor;
                            float f = fragNormal.z;
                            if (abs(f) < Edge) color = vec3(0.0);
                            if (f > Phong) color = PhongColor;
                            gl_FragColor = vec4(color, 1.0);
                        }
                  ]]>
                  </ShaderPart>
                </ComposedShader>
              </Appearance>
              <Torus innerRadius="0.3" outerRadius="0.7" />
            </Shape>
        </Transform>
        <Transform translation="1 0 0">
            <Shape>
                <Appearance>
                    <ImageTexture repeatS='false' repeatT='false' url='"media/texture/snaefari.jpg"'>
                        <TextureProperties boundaryModeS='CLAMP_TO_EDGE' boundaryModeT='CLAMP_TO_EDGE'
                                           magnificationFilter='LINEAR' minificationFilter='LINEAR'
                                           generateMipMaps='false' id='texProps' />
                    </ImageTexture>
                    <ComposedShader>
                          <field name='tex' type='SFInt32' value='0'/>

                          <ShaderPart type='VERTEX'>
                          <![CDATA[
                                attribute vec3 position;
                                attribute vec2 texcoord;
                                uniform mat4 modelViewProjectionMatrix;
                                varying vec2 fragTexCoord;

                                void main()
                                {
                                    fragTexCoord = vec2(texcoord.x, 1.0 - texcoord.y);
                                    gl_Position = modelViewProjectionMatrix * vec4(position, 1.0);
                                }
                          ]]>
                          </ShaderPart>

                          <ShaderPart type='FRAGMENT'>
                          <![CDATA[
                                #ifdef GL_ES
                                  precision highp float;
                                #endif

                                uniform sampler2D tex;
                                varying vec2 fragTexCoord;

                                void main()
                                {
                                    vec2 Offset0 = vec2(0.0,  0.0),
                                         Offset1 = vec2(0.0,  0.0041667),
                                         Offset2 = vec2(0.0, -0.0041667),
                                         Offset3 = vec2( 0.003125, 0.0),
                                         Offset4 = vec2(-0.003125, 0.0);
                                    float KernelValue0 =  -4.0,
                                          KernelValue1 =  1.0,
                                          KernelValue2 =  1.0,
                                          KernelValue3 =  1.0,
                                          KernelValue4 =  1.0;
                                    vec3 tmp;
                                    float luminance, sum = 0.0;

                                    tmp = texture2D(tex, fragTexCoord + Offset0).rgb;
                                    luminance = dot(vec3(0.2125, 0.7154, 0.0721), tmp);
                                    sum += luminance * KernelValue0;

                                    tmp = texture2D(tex, fragTexCoord + Offset1).rgb;
                                    luminance = dot(vec3(0.2125, 0.7154, 0.0721), tmp);
                                    sum += luminance * KernelValue1;

                                    tmp = texture2D(tex, fragTexCoord + Offset2).rgb;
                                    luminance = dot(vec3(0.2125, 0.7154, 0.0721), tmp);
                                    sum += luminance * KernelValue2;

                                    tmp = texture2D(tex, fragTexCoord + Offset3).rgb;
                                    luminance = dot(vec3(0.2125, 0.7154, 0.0721), tmp);
                                    sum += luminance * KernelValue3;

                                    tmp = texture2D(tex, fragTexCoord + Offset4).rgb;
                                    luminance = dot(vec3(0.2125, 0.7154, 0.0721), tmp);
                                    sum += luminance * KernelValue4;

                                    sum = 1.0 - sum;

                                    gl_FragColor = vec4(sum, sum, sum, 1.0);
                                }
                          ]]>
                          </ShaderPart>
                        </ComposedShader>
                  </Appearance>
                  <Plane size="2 1.5" solid="false" />
            </Shape>
        </Transform>
      </Scene>
    </X3D>
    </div>
    
</body>
</html>
